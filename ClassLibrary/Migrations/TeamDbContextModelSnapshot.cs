// <auto-generated />
using System;
using ClassLibrary.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClassLibrary.Migrations
{
    [DbContext(typeof(TeamDbContext))]
    partial class TeamDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ActivityProfile", b =>
                {
                    b.Property<int>("Activitiesid")
                        .HasColumnType("int");

                    b.Property<int>("Profilesid")
                        .HasColumnType("int");

                    b.HasKey("Activitiesid", "Profilesid");

                    b.HasIndex("Profilesid");

                    b.ToTable("ActivityProfile");
                });

            modelBuilder.Entity("ClassLibrary.Db.Activity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Age_rating")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Time_end")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Time_start")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("isPrivate")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Age_rating = "All Ages",
                            Description = "A fun and competitive football match.",
                            Name = "Football Match",
                            Time_end = new DateTime(2024, 1, 28, 10, 14, 55, 781, DateTimeKind.Local).AddTicks(6233),
                            Time_start = new DateTime(2024, 1, 28, 8, 14, 55, 781, DateTimeKind.Local).AddTicks(6176),
                            isPrivate = false
                        },
                        new
                        {
                            id = 2,
                            Age_rating = "12+",
                            Description = "Training session for local basketball team.",
                            Name = "Basketball Training",
                            Time_end = new DateTime(2024, 1, 28, 11, 14, 55, 781, DateTimeKind.Local).AddTicks(6252),
                            Time_start = new DateTime(2024, 1, 28, 9, 14, 55, 781, DateTimeKind.Local).AddTicks(6250),
                            isPrivate = true
                        },
                        new
                        {
                            id = 3,
                            Age_rating = "All Ages",
                            Description = "Regional chess tournament open for all.",
                            Name = "Chess Tournament",
                            Time_end = new DateTime(2024, 1, 29, 12, 14, 55, 781, DateTimeKind.Local).AddTicks(6260),
                            Time_start = new DateTime(2024, 1, 29, 8, 14, 55, 781, DateTimeKind.Local).AddTicks(6257),
                            isPrivate = false
                        },
                        new
                        {
                            id = 4,
                            Age_rating = "18+",
                            Description = "Discussing the latest in literary wonders.",
                            Name = "Book Club",
                            Time_end = new DateTime(2024, 1, 30, 10, 14, 55, 781, DateTimeKind.Local).AddTicks(6266),
                            Time_start = new DateTime(2024, 1, 30, 8, 14, 55, 781, DateTimeKind.Local).AddTicks(6264),
                            isPrivate = false
                        },
                        new
                        {
                            id = 5,
                            Age_rating = "16+",
                            Description = "A relaxing yoga session to improve your flexibility.",
                            Name = "Yoga Class",
                            Time_end = new DateTime(2024, 1, 28, 11, 14, 55, 781, DateTimeKind.Local).AddTicks(6271),
                            Time_start = new DateTime(2024, 1, 28, 10, 14, 55, 781, DateTimeKind.Local).AddTicks(6269),
                            isPrivate = true
                        },
                        new
                        {
                            id = 6,
                            Age_rating = "All Ages",
                            Description = "Learn to cook Italian cuisine with expert chefs.",
                            Name = "Cooking Workshop",
                            Time_end = new DateTime(2024, 1, 31, 13, 14, 55, 781, DateTimeKind.Local).AddTicks(6279),
                            Time_start = new DateTime(2024, 1, 31, 8, 14, 55, 781, DateTimeKind.Local).AddTicks(6278),
                            isPrivate = false
                        },
                        new
                        {
                            id = 7,
                            Age_rating = "18+",
                            Description = "Collaborative event to solve programming challenges.",
                            Name = "Coding Hackathon",
                            Time_end = new DateTime(2024, 2, 2, 8, 14, 55, 781, DateTimeKind.Local).AddTicks(6286),
                            Time_start = new DateTime(2024, 2, 1, 8, 14, 55, 781, DateTimeKind.Local).AddTicks(6284),
                            isPrivate = false
                        },
                        new
                        {
                            id = 8,
                            Age_rating = "12+",
                            Description = "Experience the thrill of rock climbing with trained instructors.",
                            Name = "Rock Climbing Adventure",
                            Time_end = new DateTime(2024, 1, 29, 14, 14, 55, 781, DateTimeKind.Local).AddTicks(6292),
                            Time_start = new DateTime(2024, 1, 29, 10, 14, 55, 781, DateTimeKind.Local).AddTicks(6290),
                            isPrivate = true
                        },
                        new
                        {
                            id = 9,
                            Age_rating = "All Ages",
                            Description = "Beginner guitar lessons for aspiring musicians.",
                            Name = "Guitar Lessons",
                            Time_end = new DateTime(2024, 1, 30, 11, 14, 55, 781, DateTimeKind.Local).AddTicks(6298),
                            Time_start = new DateTime(2024, 1, 30, 9, 14, 55, 781, DateTimeKind.Local).AddTicks(6296),
                            isPrivate = true
                        },
                        new
                        {
                            id = 10,
                            Age_rating = "All Ages",
                            Description = "Showcasing contemporary art from local artists.",
                            Name = "Art Exhibition",
                            Time_end = new DateTime(2024, 2, 3, 16, 14, 55, 781, DateTimeKind.Local).AddTicks(6306),
                            Time_start = new DateTime(2024, 2, 3, 8, 14, 55, 781, DateTimeKind.Local).AddTicks(6304),
                            isPrivate = false
                        });
                });

            modelBuilder.Entity("ClassLibrary.Db.Group", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ReqNumUsers")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ClassLibrary.Db.InterestTag", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Profileid")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("Profileid");

                    b.ToTable("InterestTags");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Tag = "Football"
                        },
                        new
                        {
                            id = 2,
                            Tag = "Basketball"
                        },
                        new
                        {
                            id = 3,
                            Tag = "Soccer"
                        },
                        new
                        {
                            id = 4,
                            Tag = "Hiking"
                        },
                        new
                        {
                            id = 5,
                            Tag = "Running"
                        });
                });

            modelBuilder.Entity("ClassLibrary.Db.Profile", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AboutMe")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Image")
                        .HasColumnType("blob");

                    b.Property<string>("Links")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LookingFor")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Pronouns")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            id = 1,
                            AboutMe = "I am a student at the University of Utah",
                            Image = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            Links = "https://www.facebook.com/ https://www.instagram.com/",
                            LookingFor = "I am looking for a group of people to play football with",
                            Name = "Football",
                            Pronouns = "He/Him",
                            UserId = 1
                        },
                        new
                        {
                            id = 2,
                            AboutMe = "I am a student at the University of Utah",
                            Links = "https://www.facebook.com/ https://www.instagram.com/",
                            LookingFor = "I am looking for a group of people to play basketball with",
                            Name = "Basketball",
                            Pronouns = "He/Him",
                            UserId = 1
                        },
                        new
                        {
                            id = 3,
                            AboutMe = "I am a student at the University of Utah",
                            Image = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            Links = "https://www.facebook.com/ https://www.instagram.com/",
                            LookingFor = "I am looking for a group of people to play football with",
                            Name = "Football",
                            Pronouns = "He/Him",
                            UserId = 2
                        },
                        new
                        {
                            id = 4,
                            AboutMe = "I am a student at the University of Utah",
                            Links = "https://www.facebook.com/ https://www.instagram.com/",
                            LookingFor = "I am looking for a group of people to play basketball with",
                            Name = "Basketball",
                            Pronouns = "He/Him",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ClassLibrary.Db.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Groupid")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nickname")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("Groupid");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            id = 1,
                            BDate = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jd@gmail.com",
                            Name = "John Doe",
                            Nickname = "JD",
                            Password = "password"
                        },
                        new
                        {
                            id = 2,
                            BDate = new DateTime(2003, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane@gmai.com",
                            Name = "Jane Doe",
                            Nickname = "Jane",
                            Password = "password"
                        });
                });

            modelBuilder.Entity("GroupProfile", b =>
                {
                    b.Property<int>("Groupsid")
                        .HasColumnType("int");

                    b.Property<int>("Profilesid")
                        .HasColumnType("int");

                    b.HasKey("Groupsid", "Profilesid");

                    b.HasIndex("Profilesid");

                    b.ToTable("GroupProfile");
                });

            modelBuilder.Entity("ActivityProfile", b =>
                {
                    b.HasOne("ClassLibrary.Db.Activity", null)
                        .WithMany()
                        .HasForeignKey("Activitiesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibrary.Db.Profile", null)
                        .WithMany()
                        .HasForeignKey("Profilesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassLibrary.Db.Group", b =>
                {
                    b.HasOne("ClassLibrary.Db.Activity", "Activity")
                        .WithMany("Groups")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("ClassLibrary.Db.InterestTag", b =>
                {
                    b.HasOne("ClassLibrary.Db.Profile", null)
                        .WithMany("InterestTags")
                        .HasForeignKey("Profileid");
                });

            modelBuilder.Entity("ClassLibrary.Db.Profile", b =>
                {
                    b.HasOne("ClassLibrary.Db.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClassLibrary.Db.User", b =>
                {
                    b.HasOne("ClassLibrary.Db.Group", null)
                        .WithMany("Users")
                        .HasForeignKey("Groupid");
                });

            modelBuilder.Entity("GroupProfile", b =>
                {
                    b.HasOne("ClassLibrary.Db.Group", null)
                        .WithMany()
                        .HasForeignKey("Groupsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLibrary.Db.Profile", null)
                        .WithMany()
                        .HasForeignKey("Profilesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassLibrary.Db.Activity", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("ClassLibrary.Db.Group", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ClassLibrary.Db.Profile", b =>
                {
                    b.Navigation("InterestTags");
                });
#pragma warning restore 612, 618
        }
    }
}
